{
  "name": "artisan-marketplace-backend",
  "version": "1.0.0",
  "description": "Backend for artisan marketplace app",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "mongoose": "^7.3.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  priceInINR: { type: Number, required: true },
  image: { type: String, required: true },
  inventory: { type: Number, required: true, min: 0 },
  sold: { type: Number, default: 0, min: 0 }
}, {
  timestamps: true
});

const Product = mongoose.model('Product', productSchema);const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const Product = require('./models/Product');

const app = express();
const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/artisan_marketplace';

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('Connected to MongoDB');
}).catch(err => {
  console.error('MongoDB connection error:', err);
});

// Routes

// 1. Create product
app.post('/products', async (req, res) => {
  try {
    const { title, description, priceInINR, image, inventory } = req.body;
    const product = new Product({ title, description, priceInINR, image, inventory });
    await product.save();
    res.status(201).json(product);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// 2. Fetch all products (for FYP)
app.get('/products', async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// 3. Update product (inventory/sold)
app.patch('/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { inventory, sold } = req.body;

    // Find product
    const product = await Product.findById(id);
    if (!product) return res.status(404).json({ error: 'Product not found' });

    // Update inventory and sold count if provided
    if (typeof inventory === 'number') {
      if (inventory < 0) return res.status(400).json({ error: 'Inventory cannot be negative' });
      product.inventory = inventory;
    }
    if (typeof sold === 'number') {
      if (sold < 0) return res.status(400).json({ error: 'Sold count cannot be negative' });
      product.sold = sold;
    }

    await product.save();
    res.json(product);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// 4. Fetch single product
app.get('/products/:id', async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) return res.status(404).json({ error: 'Product not found' });
    res.json(product);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Server start
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = Product;
